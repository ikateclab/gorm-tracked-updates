// Diff compares this {{.Name}} instance with another and returns a map of differences
// with only the new values for fields that have changed.
// Returns nil if either pointer is nil.
func (a *{{.Name}}) Diff(b *{{.Name}}) map[string]interface{} {
	// Handle nil pointers
	if a == nil || b == nil {
		return nil
	}

	diff := make(map[string]interface{})

	{{range .Fields}}
	// Compare {{.Name}}
	{{if eq .FieldType.String "Simple"}}
	// Simple type comparison
	if a.{{.Name}} != b.{{.Name}} {
		diff["{{.DiffKey}}"] = b.{{.Name}}
	}
	{{else if eq .FieldType.String "Struct"}}
	// Struct type comparison - call Diff method directly
	nestedDiff := a.{{.Name}}.Diff(&b.{{.Name}})
	if len(nestedDiff) > 0 {
		diff["{{.DiffKey}}"] = nestedDiff
	}
	{{else if eq .FieldType.String "StructPtr"}}
	// Pointer to struct comparison
	if a.{{.Name}} == nil || b.{{.Name}} == nil {
		if a.{{.Name}} != b.{{.Name}} {
			diff["{{.DiffKey}}"] = b.{{.Name}}
		}
	} else {
		nestedDiff := a.{{.Name}}.Diff(b.{{.Name}})
		if len(nestedDiff) > 0 {
			diff["{{.DiffKey}}"] = nestedDiff
		}
	}
	{{else if eq .FieldType.String "JSON"}}
	// JSON field comparison - handle both datatypes.JSON and struct types with jsonb storage
	{{if eq .Type "datatypes.JSON"}}
	// Use bytes.Equal for datatypes.JSON ([]byte underlying type)
	if !bytes.Equal([]byte(a.{{.Name}}), []byte(b.{{.Name}})) {
		jsonValue, err := sonic.Marshal(b.{{.Name}})
		if err == nil && !isEmptyJSON(string(jsonValue)) {
			diff["{{.DiffKey}}"] = gorm.Expr("? || ?", clause.Column{Name: "{{getColumnName .Name .Tag}}"}, string(jsonValue))
		} else if err != nil {
			// Fallback to regular assignment if JSON marshaling fails
			diff["{{.DiffKey}}"] = b.{{.Name}}
		}
		// Skip adding to diff if JSON is empty (no-op update)
	}
	{{else if or (hasPrefix .Type "JsonbStringSlice") (hasSuffix .Type "Slice")}}
	// JSON field comparison - custom slice types with jsonb storage (not comparable with !=)
	if !reflect.DeepEqual(a.{{.Name}}, b.{{.Name}}) {
		jsonValue, err := sonic.Marshal(b.{{.Name}})
		if err == nil && !isEmptyJSON(string(jsonValue)) {
			diff["{{.DiffKey}}"] = gorm.Expr("? || ?", clause.Column{Name: "{{getColumnName .Name .Tag}}"}, string(jsonValue))
		} else if err != nil {
			// Fallback to regular assignment if JSON marshaling fails
			diff["{{.DiffKey}}"] = b.{{.Name}}
		}
		// Skip adding to diff if JSON is empty (no-op update)
	}
	{{else}}
	// JSON field comparison - attribute-by-attribute diff for struct types
	{{if hasPrefix .Type "*"}}
	// Handle pointer to struct
	if a.{{.Name}} == nil && b.{{.Name}} != nil {
		// a is nil, b is not nil - use entire b
		jsonValue, err := sonic.Marshal(b.{{.Name}})
		if err == nil && !isEmptyJSON(string(jsonValue)) {
			diff["{{.DiffKey}}"] = gorm.Expr("? || ?", clause.Column{Name: "{{getColumnName .Name .Tag}}"}, string(jsonValue))
		} else if err != nil {
			diff["{{.DiffKey}}"] = b.{{.Name}}
		}
	} else if a.{{.Name}} != nil && b.{{.Name}} == nil {
		// a is not nil, b is nil - set to null
		diff["{{.DiffKey}}"] = nil
	} else if a.{{.Name}} != nil && b.{{.Name}} != nil {
		// Both are not nil - use attribute-by-attribute diff
		{{.Name}}Diff := a.{{.Name}}.Diff(b.{{.Name}})
		if len({{.Name}}Diff) > 0 {
			jsonValue, err := sonic.Marshal({{.Name}}Diff)
			if err == nil && !isEmptyJSON(string(jsonValue)) {
				diff["{{.DiffKey}}"] = gorm.Expr("? || ?", clause.Column{Name: "{{getColumnName .Name .Tag}}"}, string(jsonValue))
			} else if err != nil {
				// Fallback to regular assignment if JSON marshaling fails
				diff["{{.DiffKey}}"] = b.{{.Name}}
			}
		}
	}
	{{else}}
	// Handle direct struct (not pointer) - use attribute-by-attribute diff
	{{.Name}}Diff := a.{{.Name}}.Diff(&b.{{.Name}})
	if len({{.Name}}Diff) > 0 {
		jsonValue, err := sonic.Marshal({{.Name}}Diff)
		if err == nil && !isEmptyJSON(string(jsonValue)) {
			diff["{{.DiffKey}}"] = gorm.Expr("? || ?", clause.Column{Name: "{{getColumnName .Name .Tag}}"}, string(jsonValue))
		} else if err != nil {
			// Fallback to regular assignment if JSON marshaling fails
			diff["{{.DiffKey}}"] = b.{{.Name}}
		}
	}
	{{end}}
	{{end}}
	{{else if eq .FieldType.String "Time"}}
	// Time comparison
	{{if hasPrefix .Type "*"}}
	// Pointer to time comparison
	if (a.{{.Name}} == nil) != (b.{{.Name}} == nil) || (a.{{.Name}} != nil && !a.{{.Name}}.Equal(*b.{{.Name}})) {
		diff["{{.DiffKey}}"] = b.{{.Name}}
	}
	{{else}}
	// Direct time comparison
	if !a.{{.Name}}.Equal(b.{{.Name}}) {
		diff["{{.DiffKey}}"] = b.{{.Name}}

	}
	{{end}}
	{{else if eq .FieldType.String "UUID"}}
	// UUID comparison
	{{if hasPrefix .Type "*"}}
	// Pointer to UUID comparison
	if (a.{{.Name}} == nil) != (b.{{.Name}} == nil) || (a.{{.Name}} != nil && *a.{{.Name}} != *b.{{.Name}}) {
		diff["{{.DiffKey}}"] = b.{{.Name}}
	}
	{{else}}
	// Direct UUID comparison
	if a.{{.Name}} != b.{{.Name}} {
		diff["{{.DiffKey}}"] = b.{{.Name}}
	}
	{{end}}
	{{else if eq .FieldType.String "GormDeletedAt"}}
	// GORM DeletedAt comparison
	if a.{{.Name}} != b.{{.Name}} {
		diff["{{.DiffKey}}"] = b.{{.Name}}
	}
	{{else if eq .FieldType.String "Comparable"}}
	// Comparable type comparison
	if a.{{.Name}} != b.{{.Name}} {
		diff["{{.DiffKey}}"] = b.{{.Name}}
	}
	{{else}}
	// Complex type comparison (slice, map, interface, etc.)
	if !reflect.DeepEqual(a.{{.Name}}, b.{{.Name}}) {
		diff["{{.DiffKey}}"] = b.{{.Name}}
	}
	{{end}}
	{{end}}

	return diff
}
